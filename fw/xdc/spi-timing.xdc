
# AT25SL64 Data:

# clock low to output valid:
#    6ns   max (main data read), 7ns max everything else
#    1.5ns min (output hold)
# data input
#    setup: min 2ns
#    hold:  min 3ns
# CS:
#    setup: min 5ns
#    hold:  min 5ns
#    deselect time: min 100ns !

# FLASH SPI
set mstClk [get_pins B_MMCM.U_MMCM/CLKOUT0]
create_generated_clock -name usrCClk -source ${mstClk} -multiply_by 1 [get_pins {*U_STARTUP/USRCCLKO}]
#create_generated_clock -name usrCClk -source [get_pins {*U_STARTUP/USRCCLKO}] -multiply_by 1 [get_pins {*U_STARTUP/USRCCLKO}]

set_clock_latency -min 0.5 [get_clocks usrCClk]
set_clock_latency -max 7.6 [get_clocks usrCClk]

set_output_delay -clock [get_clocks usrCClk]             -max  2.2 [get_ports spiMOSI]
set_output_delay -clock [get_clocks usrCClk] -add_delay  -min -3.1 [get_ports spiMOSI]

set_output_delay -clock [get_clocks usrCClk]             -max  5.1 [get_ports spiCSb]
set_output_delay -clock [get_clocks usrCClk] -add_delay  -min -5.1 [get_ports spiCSb]

set_input_delay  -clock [get_clocks usrCClk]             -min  1.6 [get_ports spiMISO]
set_input_delay  -clock [get_clocks usrCClk] -add_delay  -max  6.1 [get_ports spiMISO]

# Trying to run SPI at 1/2 the ulpi clock rate; note that under normal circumstances
# CS\ -> clock is 1/2 SPI clock cycle and thus no multicycle path.
set_multicycle_path 2 -setup -to   [get_clocks usrCClk] -through [get_ports spiMOSI]
set_multicycle_path 3 -hold -end  -to   [get_clocks usrCClk] -through [get_ports spiMOSI]

set_multicycle_path 2 -setup -from [get_clocks usrCClk] -through [get_ports spiMISO]
set_multicycle_path 3 -hold -end  -from [get_clocks usrCClk] -through [get_ports spiMISO]

# We can relax hold timing on CS since this is never changed while the SPI clock is ticking
set_multicycle_path 2 -setup -to   [get_clocks usrCClk] -through [get_ports spiCSb]
set_multicycle_path 3 -hold  -end -to   [get_clocks usrCClk] -through [get_ports spiCSb]

# ADC SPI
create_generated_clock -name adcSClk -source ${mstClk} -multiply_by 1 [get_ports adcSClk]

set_output_delay -clock [get_clocks adcSClk]             -max 10.1 [get_ports adcSDIO]
set_output_delay -clock [get_clocks adcSClk] -add_delay  -min -0.0 [get_ports adcSDIO]

# there is also a 50ns limitation on the SCLK period! that should be covered by
# the 4 clock cycles it takes to complete 1 SCLK (see below).
# Also, the CS is usually generated by a separate transfer (on USB) so the CS edges
# are well separated from SCLK
set_output_delay -clock [get_clocks adcSClk]             -max  10  [get_ports adcCSb ]
set_output_delay -clock [get_clocks adcSClk] -add_delay  -min -10  [get_ports adcCSb ]

set_input_delay  -clock [get_clocks adcSClk]             -max 10.1 [get_ports adcSDIO]
set_input_delay  -clock [get_clocks adcSClk] -add_delay  -min  0.0 [get_ports adcSDIO]

# PGA SPI
create_generated_clock -name pgaSClk -source ${mstClk} -multiply_by 1 [get_ports pgaSClk]

set_output_delay -clock [get_clocks pgaSClk]             -max 10.1 [get_ports pgaSDat]
# there is actually no hold time specified!
set_output_delay -clock [get_clocks pgaSClk] -add_delay  -min -10  [get_ports pgaSDat]

set_output_delay -clock [get_clocks pgaSClk]             -max 20.1 [get_ports pgaCSb*]
set_output_delay -clock [get_clocks pgaSClk] -add_delay  -min -10  [get_ports pgaCSb*]

# max bit-bang rate are 2 clock cycles; the BitBangIF has an internal delay of 1 clock cycle
# which limits the fastest bit-banged clock to 4 cycles
# Data changes on the negative edges and is captured on positive edges of SCLK
# this gives 2 clock cycles for setup-time.
# Chip-select would probably be 1/2 a SPI clock cycle also.
# This doesnt' pass timing, however. Since the software uses a dedicated
# transfer for CS this is fine; otherwise, additional delay may be introduced
# in software.
set_multicycle_path 2 -setup -to   [get_clocks adcSClk] -through [get_ports {adcSDIO}]
set_multicycle_path 3 -hold -end  -to   [get_clocks adcSClk] -through [get_ports {adcSDIO}]
set_multicycle_path 2 -setup -from [get_clocks adcSClk] -through [get_ports {adcSDIO}]
set_multicycle_path 3 -hold -end  -from   [get_clocks adcSClk] -through [get_ports {adcSDIO}]
set_multicycle_path 2 -setup -to   [get_clocks adcSClk] -through [get_ports {adcCSb}]
set_multicycle_path 3 -hold -end -to    [get_clocks adcSClk] -through [get_ports {adcCSb}]

set_multicycle_path 2 -setup -to   [get_clocks pgaSClk] -through [get_ports {pgaSDat}]
set_multicycle_path 3 -hold -end  -to   [get_clocks pgaSClk] -through [get_ports {pgaSDat}]
set_multicycle_path 2 -setup -to   [get_clocks pgaSClk] -through [get_ports {pgaCSb*}]
set_multicycle_path 3 -hold -end  -to   [get_clocks pgaSClk] -through [get_ports {pgaCSb*}]
